{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","CountdownTimer","constructor","onTick","selector","targetDate","start","setInterval","currentTime","Date","now","deltaTimes","getTimeComponents","console","log","pad","value","String","padStart","time","Math","floor","timer","updateClockface","textContent"],"mappings":";;;AA+CA,aA/CA,QAAA,oBAEA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAe,uBAC9BC,MAAOF,SAASC,cAAe,wBAC/BE,KAAMH,SAASC,cAAe,uBAC9BG,KAAMJ,SAASC,cAAe,wBAGhC,MAAMI,EACJC,aAAY,OAAEC,EAAF,SAAUC,EAAV,WAAoBC,IACzBF,KAAAA,OAASA,EACTC,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAEpBC,QACEC,YAAY,KACJC,MAAAA,EAAcC,KAAKC,MACnBC,EAAa,KAAKN,WAAaG,GAC/B,KAAEb,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKY,kBAAkBD,GAC3DE,QAAQC,OAAOnB,KAAQG,KAASC,KAAQC,KACnCG,KAAAA,OAAO,CAAER,KAAAA,EAAMG,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,KAChC,KAELe,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAEnCN,kBAAkBO,GAKT,MAAA,CAAExB,KAJI,KAAKoB,IAAIK,KAAKC,MAAMF,EAAQ,QAI1BrB,MAHD,KAAKiB,IAAIK,KAAKC,MAAOF,EAAQ,MAAyB,OAG9CpB,KAFT,KAAKgB,IAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAElCnB,KADf,KAAKe,IAAIK,KAAKC,MAAOF,EAAQ,IAAc,QAI5D,MAAMG,EAAQ,IAAIrB,EAAe,CAC/BG,SAAU,WACVC,WAAY,IAAII,KAAK,gBACrBN,OAAQoB,IAGV,SAASA,GAAgB,KAAE5B,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC5CN,EAAKC,KAAK6B,eAAiB7B,IAC3BD,EAAKI,MAAM0B,eAAiB1B,IAC5BJ,EAAKK,KAAKyB,eAAiBzB,IAC3BL,EAAKM,KAAKwB,eAAiBxB,IAE7BsB,EAAMhB","file":"src.8666fc72.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  days: document.querySelector(`[data-value=\"days\"]`),\n  hours: document.querySelector(`[data-value=\"hours\"]`),\n  mins: document.querySelector(`[data-value=\"mins\"]`),\n  secs: document.querySelector(`[data-value=\"secs\"]`),\n};\n\nclass CountdownTimer {\n  constructor({ onTick, selector, targetDate }) {\n    this.onTick = onTick;\n    this.selector = selector;\n    this.targetDate = targetDate;\n  }\n  start() {\n    setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTimes = this.targetDate - currentTime;\n      const { days, hours, mins, secs } = this.getTimeComponents(deltaTimes);\n      console.log(`${days}:${hours}:${mins}:${secs}`);\n      this.onTick({ days, hours, mins, secs });\n    }, 1000);\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n  }\n}\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2022'),\n  onTick: updateClockface,\n});\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\ntimer.start();\n"]}