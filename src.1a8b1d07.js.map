{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","start","elements","getElement","setInterval","currentTime","Date","now","deltaTimes","clock","getTimeComponents","console","log","updateClockface","pad","value","String","padStart","time","days","Math","floor","hours","mins","secs","daysEl","textContent","hoursEl","minsEl","secsEl","refs","document","querySelector","timer1","timer2"],"mappings":";;;AAoEA,aApEA,QAAA,oBAIA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,QAEAC,KAAAA,SAAS,KAAKC,WAAWJ,GAKlCE,QACIG,YAAY,KACJC,MAAAA,EAAcC,KAAKC,MACnBC,EAAa,KAAKR,WAAaK,EAC/BI,EAAQ,KAAKC,kBAAkBF,GACrCG,QAAQC,IAAIH,GACPI,KAAAA,gBAAgBJ,IAEpB,KAIPK,IAAIC,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAErCP,kBAAkBQ,GAKP,MAAA,CAACC,KAJK,KAAKL,IAAIM,KAAKC,MAAMH,EAAQ,QAI3BI,MAHA,KAAKR,IAAIM,KAAKC,MAAOH,EAAQ,MAAyB,OAG/CK,KAFR,KAAKT,IAAIM,KAAKC,MAAOH,EAAQ,KAAoB,MAEnCM,KADd,KAAKV,IAAIM,KAAKC,MAAOH,EAAQ,IAAc,OAI5DL,gBAAgBJ,GAGPP,KAAAA,SAASuB,OAAOC,eAAiBjB,EAAMU,OACvCjB,KAAAA,SAASyB,QAAQD,eAAiBjB,EAAMa,QACxCpB,KAAAA,SAAS0B,OAAOF,eAAiBjB,EAAMc,OACvCrB,KAAAA,SAAS2B,OAAOH,eAAiBjB,EAAMe,OAC5Cb,QAAQC,IAAI,KAAKV,SAASuB,OAAOC,aAInCvB,WAAWJ,GASF+B,MAPI,CACXL,OAAQM,SAASC,iBAAiB,KAAKjC,gCACvC4B,QAASI,SAASC,iBAAiB,KAAKjC,iCACxC6B,OAAQG,SAASC,iBAAiB,KAAKjC,gCACvC8B,OAAQE,SAASC,iBAAiB,KAAKjC,kCAO3C,MAAMkC,EAAS,IAAIpC,EAAe,CAChCE,SAAU,WACVC,WAAY,IAAIM,KAAK,kBAIjB4B,EAAS,IAAIrC,EAAe,CAChCE,SAAU,WACVC,WAAY,IAAIM,KAAK","file":"src.1a8b1d07.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\r\n\r\n\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {   \r\n    this.selector = selector;\r\n    this.targetDate = targetDate;       \r\n    this.start();\r\n    \r\n    this.elements=this.getElement(selector);\r\n    \r\n     }\r\n  \r\n  \r\nstart() {\r\n    setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTimes = this.targetDate - currentTime;\r\n      const clock = this.getTimeComponents(deltaTimes);\r\n      console.log(clock);\r\n      this.updateClockface(clock);\r\n      \r\n    }, 1000);\r\n  }\r\n \r\n    \r\npad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\ngetTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    return {days, hours, mins, secs};   \r\n\r\n  } \r\nupdateClockface(clock) {\r\n  \r\n    \r\n    this.elements.daysEl.textContent = `${clock.days}`;\r\n    this.elements.hoursEl.textContent = `${clock.hours}`;\r\n    this.elements.minsEl.textContent = `${clock.mins}`;\r\n    this.elements.secsEl.textContent = `${clock.secs}`;\r\n    console.log(this.elements.daysEl.textContent);\r\n    \r\n    \r\n  };\r\n  getElement(selector){ \r\n    \r\n    const refs={    \r\n    daysEl: document.querySelector(`${this.selector} [data-value=\"days\"]`),\r\n    hoursEl: document.querySelector(`${this.selector} [data-value=\"hours\"]`),\r\n    minsEl: document.querySelector(`${this.selector} [data-value=\"mins\"]`),\r\n    secsEl: document.querySelector(`${this.selector} [data-value=\"secs\"]`), \r\n      \r\n    } \r\n    return refs;\r\n  }\r\n  \r\n}\r\nconst timer1 = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2022'),\r\n  \r\n});\r\n\r\nconst timer2 = new CountdownTimer({\r\n  selector: '#timer-2',\r\n  targetDate: new Date('Jul 17, 2023'),\r\n  \r\n});\r\n\r\n\r\n\r\n"]}